package javalibrary.cipher.stats;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class CipherStatisticsOld {

/**
	public static HashMap<String, List<StatisticRange>> getOtherCipherStatistics() {
		HashMap<String, List<StatisticRange>> map = new	HashMap<String, List<StatisticRange>>();
		List<StatisticRange> plaintextList = new ArrayList<StatisticRange>();
		plaintextList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 63.0D, 5.0D));
		plaintextList.add(new StatisticRange(StatisticType.MAX_IOC, 73.0D, 11.0D));
		plaintextList.add(new StatisticRange(StatisticType.MAX_KAPPA, 95.0D, 19.0D));
		plaintextList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 72.0D, 18.0D));
		plaintextList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 73.0D, 24.0D));
		plaintextList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 22.0D, 5.0D));
		plaintextList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 50.0D, 6.0D));
		plaintextList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 756.0D, 13.0D));
		plaintextList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 303.0D, 23.0D));
		map.put("Plaintext", plaintextList);
		List<StatisticRange> randomdigitList = new ArrayList<StatisticRange>();
		randomdigitList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 100.0D, 2.0D));
		randomdigitList.add(new StatisticRange(StatisticType.MAX_IOC, 108.0D, 8.0D));
		randomdigitList.add(new StatisticRange(StatisticType.MAX_KAPPA, 132.0D, 16.0D));
		randomdigitList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 100.0D, 8.0D));
		randomdigitList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 98.0D, 15.0D));
		randomdigitList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 21.0D, 3.0D));
		randomdigitList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 50.0D, 3.0D));
		randomdigitList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 0.0D, 0.0D));
		randomdigitList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 0.0D, 0.0D));
		map.put("Randomdigit", randomdigitList);
		List<StatisticRange> randomtextList = new ArrayList<StatisticRange>();
		randomtextList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 38.0D, 1.0D));
		randomtextList.add(new StatisticRange(StatisticType.MAX_IOC, 44.0D, 5.0D));
		randomtextList.add(new StatisticRange(StatisticType.MAX_KAPPA, 60.0D, 12.0D));
		randomtextList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 14.0D, 2.0D));
		randomtextList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 14.0D, 5.0D));
		randomtextList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 5.0D, 3.0D));
		randomtextList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 50.0D, 10.0D));
		randomtextList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 428.0D, 23.0D));
		randomtextList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 109.0D, 14.0D));
		map.put("Randomtext", randomtextList);
		List<StatisticRange> sixXsixbifidList = new ArrayList<StatisticRange>();
		sixXsixbifidList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 35.0D, 4.0D));
		sixXsixbifidList.add(new StatisticRange(StatisticType.MAX_IOC, 47.0D, 9.0D));
		sixXsixbifidList.add(new StatisticRange(StatisticType.MAX_KAPPA, 62.0D, 16.0D));
		sixXsixbifidList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 14.0D, 5.0D));
		sixXsixbifidList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 14.0D, 8.0D));
		sixXsixbifidList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 4.0D, 3.0D));
		sixXsixbifidList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 49.0D, 12.0D));
		sixXsixbifidList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 298.0D, 53.0D));
		sixXsixbifidList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 71.0D, 16.0D));
		map.put("6x6Bifid", sixXsixbifidList);
		List<StatisticRange> sixXsixplayfairList = new ArrayList<StatisticRange>();
		sixXsixplayfairList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 42.0D, 4.0D));
		sixXsixplayfairList.add(new StatisticRange(StatisticType.MAX_IOC, 51.0D, 9.0D));
		sixXsixplayfairList.add(new StatisticRange(StatisticType.MAX_KAPPA, 67.0D, 15.0D));
		sixXsixplayfairList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 32.0D, 9.0D));
		sixXsixplayfairList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 72.0D, 24.0D));
		sixXsixplayfairList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 11.0D, 5.0D));
		sixXsixplayfairList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 25.0D, 9.0D));
		sixXsixplayfairList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 243.0D, 57.0D));
		sixXsixplayfairList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 63.0D, 19.0D));
		map.put("6x6Playfair", sixXsixplayfairList);
		List<StatisticRange> amscoList = new ArrayList<StatisticRange>();
		amscoList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 63.0D, 5.0D));
		amscoList.add(new StatisticRange(StatisticType.MAX_IOC, 72.0D, 10.0D));
		amscoList.add(new StatisticRange(StatisticType.MAX_KAPPA, 94.0D, 19.0D));
		amscoList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 44.0D, 10.0D));
		amscoList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 43.0D, 13.0D));
		amscoList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 11.0D, 4.0D));
		amscoList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 50.0D, 8.0D));
		amscoList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 688.0D, 15.0D));
		amscoList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 188.0D, 17.0D));
		map.put("Amsco", amscoList);
		List<StatisticRange> bazeriesList = new ArrayList<StatisticRange>();
		bazeriesList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 64.0D, 4.0D));
		bazeriesList.add(new StatisticRange(StatisticType.MAX_IOC, 74.0D, 13.0D));
		bazeriesList.add(new StatisticRange(StatisticType.MAX_KAPPA, 94.0D, 20.0D));
		bazeriesList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 60.0D, 15.0D));
		bazeriesList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 61.0D, 20.0D));
		bazeriesList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 17.0D, 5.0D));
		bazeriesList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 49.0D, 5.0D));
		bazeriesList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 477.0D, 44.0D));
		bazeriesList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 112.0D, 21.0D));
		map.put("Bazeries", bazeriesList);
		List<StatisticRange> beaufortList = new ArrayList<StatisticRange>();
		beaufortList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 42.0D, 3.0D));
		beaufortList.add(new StatisticRange(StatisticType.MAX_IOC, 67.0D, 9.0D));
		beaufortList.add(new StatisticRange(StatisticType.MAX_KAPPA, 78.0D, 17.0D));
		beaufortList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 23.0D, 5.0D));
		beaufortList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 23.0D, 9.0D));
		beaufortList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 9.0D, 4.0D));
		beaufortList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 50.0D, 10.0D));
		beaufortList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 443.0D, 32.0D));
		beaufortList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 113.0D, 15.0D));
		map.put("Beaufort", beaufortList);
		List<StatisticRange> bifid6List = new ArrayList<StatisticRange>();
		bifid6List.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 47.0D, 4.0D));
		bifid6List.add(new StatisticRange(StatisticType.MAX_IOC, 58.0D, 10.0D));
		bifid6List.add(new StatisticRange(StatisticType.MAX_KAPPA, 75.0D, 15.0D));
		bifid6List.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 24.0D, 6.0D));
		bifid6List.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 24.0D, 8.0D));
		bifid6List.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 7.0D, 4.0D));
		bifid6List.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 48.0D, 10.0D));
		bifid6List.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 510.0D, 36.0D));
		bifid6List.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 119.0D, 16.0D));
		map.put("Bifid6", bifid6List);
		List<StatisticRange> bifid7List = new ArrayList<StatisticRange>();
		bifid7List.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 47.0D, 4.0D));
		bifid7List.add(new StatisticRange(StatisticType.MAX_IOC, 58.0D, 9.0D));
		bifid7List.add(new StatisticRange(StatisticType.MAX_KAPPA, 77.0D, 17.0D));
		bifid7List.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 24.0D, 6.0D));
		bifid7List.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 23.0D, 8.0D));
		bifid7List.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 7.0D, 4.0D));
		bifid7List.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 49.0D, 9.0D));
		bifid7List.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 517.0D, 37.0D));
		bifid7List.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 118.0D, 17.0D));
		map.put("Bifid7", bifid7List);
		List<StatisticRange> cadenusList = new ArrayList<StatisticRange>();
		cadenusList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 63.0D, 5.0D));
		cadenusList.add(new StatisticRange(StatisticType.MAX_IOC, 74.0D, 11.0D));
		cadenusList.add(new StatisticRange(StatisticType.MAX_KAPPA, 95.0D, 17.0D));
		cadenusList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 40.0D, 9.0D));
		cadenusList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 41.0D, 13.0D));
		cadenusList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 10.0D, 4.0D));
		cadenusList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 49.0D, 9.0D));
		cadenusList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 657.0D, 17.0D));
		cadenusList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 134.0D, 18.0D));
		map.put("Cadenus", cadenusList);
		List<StatisticRange> cmbifidList = new ArrayList<StatisticRange>();
		cmbifidList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 47.0D, 4.0D));
		cmbifidList.add(new StatisticRange(StatisticType.MAX_IOC, 57.0D, 9.0D));
		cmbifidList.add(new StatisticRange(StatisticType.MAX_KAPPA, 75.0D, 15.0D));
		cmbifidList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 23.0D, 5.0D));
		cmbifidList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 23.0D, 9.0D));
		cmbifidList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 6.0D, 4.0D));
		cmbifidList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 50.0D, 10.0D));
		cmbifidList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 493.0D, 31.0D));
		cmbifidList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 114.0D, 16.0D));
		map.put("Cmbifid", cmbifidList);
		List<StatisticRange> columnarList = new ArrayList<StatisticRange>();
		columnarList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 63.0D, 5.0D));
		columnarList.add(new StatisticRange(StatisticType.MAX_IOC, 73.0D, 11.0D));
		columnarList.add(new StatisticRange(StatisticType.MAX_KAPPA, 96.0D, 18.0D));
		columnarList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 41.0D, 8.0D));
		columnarList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 41.0D, 12.0D));
		columnarList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 11.0D, 4.0D));
		columnarList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 50.0D, 7.0D));
		columnarList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 653.0D, 16.0D));
		columnarList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 128.0D, 15.0D));
		map.put("Columnar", columnarList);
		List<StatisticRange> digrafidList = new ArrayList<StatisticRange>();
		digrafidList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 41.0D, 3.0D));
		digrafidList.add(new StatisticRange(StatisticType.MAX_IOC, 53.0D, 7.0D));
		digrafidList.add(new StatisticRange(StatisticType.MAX_KAPPA, 67.0D, 13.0D));
		digrafidList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 17.0D, 4.0D));
		digrafidList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 20.0D, 7.0D));
		digrafidList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 5.0D, 3.0D));
		digrafidList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 43.0D, 11.0D));
		digrafidList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 469.0D, 33.0D));
		digrafidList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 112.0D, 15.0D));
		map.put("Digrafid", digrafidList);
		List<StatisticRange> doublecheckerboardList = new ArrayList<StatisticRange>();
		doublecheckerboardList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 90.0D, 13.0D));
		doublecheckerboardList.add(new StatisticRange(StatisticType.MAX_IOC, 133.0D, 18.0D));
		doublecheckerboardList.add(new StatisticRange(StatisticType.MAX_KAPPA, 149.0D, 23.0D));
		doublecheckerboardList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 110.0D, 30.0D));
		doublecheckerboardList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 207.0D, 58.0D));
		doublecheckerboardList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 25.0D, 5.0D));
		doublecheckerboardList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 13.0D, 7.0D));
		doublecheckerboardList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 609.0D, 44.0D));
		doublecheckerboardList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 133.0D, 19.0D));
		map.put("DoubleCheckerBoard", doublecheckerboardList);
		List<StatisticRange> four_squareList = new ArrayList<StatisticRange>();
		four_squareList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 48.0D, 3.0D));
		four_squareList.add(new StatisticRange(StatisticType.MAX_IOC, 58.0D, 9.0D));
		four_squareList.add(new StatisticRange(StatisticType.MAX_KAPPA, 76.0D, 15.0D));
		four_squareList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 36.0D, 8.0D));
		four_squareList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 72.0D, 24.0D));
		four_squareList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 11.0D, 4.0D));
		four_squareList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 28.0D, 8.0D));
		four_squareList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 507.0D, 33.0D));
		four_squareList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 114.0D, 16.0D));
		map.put("Four_square", four_squareList);
		List<StatisticRange> fracmorseList = new ArrayList<StatisticRange>();
		fracmorseList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 47.0D, 2.0D));
		fracmorseList.add(new StatisticRange(StatisticType.MAX_IOC, 53.0D, 8.0D));
		fracmorseList.add(new StatisticRange(StatisticType.MAX_KAPPA, 70.0D, 15.0D));
		fracmorseList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 42.0D, 9.0D));
		fracmorseList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 43.0D, 13.0D));
		fracmorseList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 16.0D, 3.0D));
		fracmorseList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 50.0D, 7.0D));
		fracmorseList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 444.0D, 32.0D));
		fracmorseList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 107.0D, 17.0D));
		map.put("FracMorse", fracmorseList);
		List<StatisticRange> grandpreList = new ArrayList<StatisticRange>();
		grandpreList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 128.0D, 3.0D));
		grandpreList.add(new StatisticRange(StatisticType.MAX_IOC, 136.0D, 7.0D));
		grandpreList.add(new StatisticRange(StatisticType.MAX_KAPPA, 158.0D, 15.0D));
		grandpreList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 179.0D, 15.0D));
		grandpreList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 227.0D, 39.0D));
		grandpreList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 33.0D, 3.0D));
		grandpreList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 43.0D, 3.0D));
		grandpreList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 0.0D, 0.0D));
		grandpreList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 0.0D, 0.0D));
		map.put("Grandpre", grandpreList);
		List<StatisticRange> grilleList = new ArrayList<StatisticRange>();
		grilleList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 63.0D, 5.0D));
		grilleList.add(new StatisticRange(StatisticType.MAX_IOC, 74.0D, 12.0D));
		grilleList.add(new StatisticRange(StatisticType.MAX_KAPPA, 91.0D, 16.0D));
		grilleList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 42.0D, 9.0D));
		grilleList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 43.0D, 14.0D));
		grilleList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 10.0D, 4.0D));
		grilleList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 49.0D, 7.0D));
		grilleList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 679.0D, 16.0D));
		grilleList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 173.0D, 17.0D));
		map.put("Grille", grilleList);
		List<StatisticRange> gromarkList = new ArrayList<StatisticRange>();
		gromarkList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 39.0D, 1.0D));
		gromarkList.add(new StatisticRange(StatisticType.MAX_IOC, 46.0D, 7.0D));
		gromarkList.add(new StatisticRange(StatisticType.MAX_KAPPA, 63.0D, 13.0D));
		gromarkList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 15.0D, 3.0D));
		gromarkList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 15.0D, 6.0D));
		gromarkList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 4.0D, 3.0D));
		gromarkList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 50.0D, 12.0D));
		gromarkList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 431.0D, 26.0D));
		gromarkList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 109.0D, 15.0D));
		map.put("Gromark", gromarkList);
		List<StatisticRange> gronsfeldList = new ArrayList<StatisticRange>();
		gronsfeldList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 40.0D, 2.0D));
		gronsfeldList.add(new StatisticRange(StatisticType.MAX_IOC, 66.0D, 8.0D));
		gronsfeldList.add(new StatisticRange(StatisticType.MAX_KAPPA, 76.0D, 19.0D));
		gronsfeldList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 21.0D, 5.0D));
		gronsfeldList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 25.0D, 11.0D));
		gronsfeldList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 9.0D, 4.0D));
		gronsfeldList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 42.0D, 14.0D));
		gronsfeldList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 444.0D, 27.0D));
		gronsfeldList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 111.0D, 15.0D));
		map.put("Gronsfeld", gronsfeldList);
		List<StatisticRange> homophonicList = new ArrayList<StatisticRange>();
		homophonicList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 101.0D, 1.0D));
		homophonicList.add(new StatisticRange(StatisticType.MAX_IOC, 108.0D, 6.0D));
		homophonicList.add(new StatisticRange(StatisticType.MAX_KAPPA, 127.0D, 13.0D));
		homophonicList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 116.0D, 7.0D));
		homophonicList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 160.0D, 15.0D));
		homophonicList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 24.0D, 2.0D));
		homophonicList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 42.0D, 2.0D));
		homophonicList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 0.0D, 0.0D));
		homophonicList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 0.0D, 0.0D));
		map.put("Homophonic", homophonicList);
		List<StatisticRange> monomedinomeList = new ArrayList<StatisticRange>();
		monomedinomeList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 124.0D, 7.0D));
		monomedinomeList.add(new StatisticRange(StatisticType.MAX_IOC, 134.0D, 11.0D));
		monomedinomeList.add(new StatisticRange(StatisticType.MAX_KAPPA, 169.0D, 19.0D));
		monomedinomeList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 249.0D, 36.0D));
		monomedinomeList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 252.0D, 43.0D));
		monomedinomeList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 45.0D, 5.0D));
		monomedinomeList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 49.0D, 2.0D));
		monomedinomeList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 0.0D, 0.0D));
		monomedinomeList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 0.0D, 0.0D));
		map.put("MonomeDinome", monomedinomeList);
		List<StatisticRange> morbitList = new ArrayList<StatisticRange>();
		morbitList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 122.0D, 4.0D));
		morbitList.add(new StatisticRange(StatisticType.MAX_IOC, 129.0D, 7.0D));
		morbitList.add(new StatisticRange(StatisticType.MAX_KAPPA, 156.0D, 16.0D));
		morbitList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 193.0D, 15.0D));
		morbitList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 194.0D, 25.0D));
		morbitList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 38.0D, 2.0D));
		morbitList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 49.0D, 2.0D));
		morbitList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 0.0D, 0.0D));
		morbitList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 0.0D, 0.0D));
		map.put("Morbit", morbitList);
		List<StatisticRange> myszkowskiList = new ArrayList<StatisticRange>();
		myszkowskiList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 63.0D, 5.0D));
		myszkowskiList.add(new StatisticRange(StatisticType.MAX_IOC, 72.0D, 10.0D));
		myszkowskiList.add(new StatisticRange(StatisticType.MAX_KAPPA, 95.0D, 18.0D));
		myszkowskiList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 41.0D, 8.0D));
		myszkowskiList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 41.0D, 13.0D));
		myszkowskiList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 11.0D, 4.0D));
		myszkowskiList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 49.0D, 7.0D));
		myszkowskiList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 657.0D, 18.0D));
		myszkowskiList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 135.0D, 18.0D));
		map.put("Myszkowski", myszkowskiList);
		List<StatisticRange> nicodemusList = new ArrayList<StatisticRange>();
		nicodemusList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 42.0D, 3.0D));
		nicodemusList.add(new StatisticRange(StatisticType.MAX_IOC, 50.0D, 7.0D));
		nicodemusList.add(new StatisticRange(StatisticType.MAX_KAPPA, 73.0D, 14.0D));
		nicodemusList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 18.0D, 4.0D));
		nicodemusList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 18.0D, 7.0D));
		nicodemusList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 5.0D, 3.0D));
		nicodemusList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 50.0D, 10.0D));
		nicodemusList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 442.0D, 35.0D));
		nicodemusList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 112.0D, 15.0D));
		map.put("Nicodemus", nicodemusList);
		List<StatisticRange> nihilistsubList = new ArrayList<StatisticRange>();
		nihilistsubList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 144.0D, 11.0D));
		nihilistsubList.add(new StatisticRange(StatisticType.MAX_IOC, 201.0D, 23.0D));
		nihilistsubList.add(new StatisticRange(StatisticType.MAX_KAPPA, 195.0D, 30.0D));
		nihilistsubList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 218.0D, 33.0D));
		nihilistsubList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 266.0D, 42.0D));
		nihilistsubList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 38.0D, 4.0D));
		nihilistsubList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 40.0D, 6.0D));
		nihilistsubList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 0.0D, 0.0D));
		nihilistsubList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 0.0D, 0.0D));
		map.put("Nihilistsub", nihilistsubList);
		List<StatisticRange> nihilisttranspList = new ArrayList<StatisticRange>();
		nihilisttranspList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 63.0D, 5.0D));
		nihilisttranspList.add(new StatisticRange(StatisticType.MAX_IOC, 73.0D, 12.0D));
		nihilisttranspList.add(new StatisticRange(StatisticType.MAX_KAPPA, 97.0D, 18.0D));
		nihilisttranspList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 41.0D, 9.0D));
		nihilisttranspList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 40.0D, 13.0D));
		nihilisttranspList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 10.0D, 4.0D));
		nihilisttranspList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 50.0D, 9.0D));
		nihilisttranspList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 654.0D, 17.0D));
		nihilisttranspList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 129.0D, 17.0D));
		map.put("NihilistTransp", nihilisttranspList);
		List<StatisticRange> patristocratList = new ArrayList<StatisticRange>();
		patristocratList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 63.0D, 5.0D));
		patristocratList.add(new StatisticRange(StatisticType.MAX_IOC, 73.0D, 11.0D));
		patristocratList.add(new StatisticRange(StatisticType.MAX_KAPPA, 95.0D, 19.0D));
		patristocratList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 72.0D, 18.0D));
		patristocratList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 73.0D, 24.0D));
		patristocratList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 22.0D, 5.0D));
		patristocratList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 50.0D, 6.0D));
		patristocratList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 414.0D, 57.0D));
		patristocratList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 106.0D, 23.0D));
		map.put("Patristocrat", patristocratList);
		List<StatisticRange> phillipsList = new ArrayList<StatisticRange>();
		phillipsList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 49.0D, 3.0D));
		phillipsList.add(new StatisticRange(StatisticType.MAX_IOC, 58.0D, 8.0D));
		phillipsList.add(new StatisticRange(StatisticType.MAX_KAPPA, 74.0D, 16.0D));
		phillipsList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 32.0D, 7.0D));
		phillipsList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 32.0D, 10.0D));
		phillipsList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 11.0D, 4.0D));
		phillipsList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 49.0D, 9.0D));
		phillipsList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 424.0D, 37.0D));
		phillipsList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 106.0D, 17.0D));
		map.put("Phillips", phillipsList);
		List<StatisticRange> periodicgromarkList = new ArrayList<StatisticRange>();
		periodicgromarkList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 38.0D, 1.0D));
		periodicgromarkList.add(new StatisticRange(StatisticType.MAX_IOC, 45.0D, 7.0D));
		periodicgromarkList.add(new StatisticRange(StatisticType.MAX_KAPPA, 63.0D, 14.0D));
		periodicgromarkList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 14.0D, 3.0D));
		periodicgromarkList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 15.0D, 6.0D));
		periodicgromarkList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 4.0D, 3.0D));
		periodicgromarkList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 48.0D, 11.0D));
		periodicgromarkList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 428.0D, 26.0D));
		periodicgromarkList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 108.0D, 16.0D));
		map.put("Periodic gromark", periodicgromarkList);
		List<StatisticRange> playfairList = new ArrayList<StatisticRange>();
		playfairList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 50.0D, 4.0D));
		playfairList.add(new StatisticRange(StatisticType.MAX_IOC, 60.0D, 9.0D));
		playfairList.add(new StatisticRange(StatisticType.MAX_KAPPA, 79.0D, 18.0D));
		playfairList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 38.0D, 9.0D));
		playfairList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 72.0D, 24.0D));
		playfairList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 12.0D, 4.0D));
		playfairList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 32.0D, 8.0D));
		playfairList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 491.0D, 42.0D));
		playfairList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 118.0D, 19.0D));
		map.put("Playfair", playfairList);
		List<StatisticRange> polluxList = new ArrayList<StatisticRange>();
		polluxList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 100.0D, 0.0D));
		polluxList.add(new StatisticRange(StatisticType.MAX_IOC, 103.0D, 2.0D));
		polluxList.add(new StatisticRange(StatisticType.MAX_KAPPA, 121.0D, 9.0D));
		polluxList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 105.0D, 2.0D));
		polluxList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 105.0D, 4.0D));
		polluxList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 23.0D, 1.0D));
		polluxList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 50.0D, 1.0D));
		polluxList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 0.0D, 0.0D));
		polluxList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 0.0D, 0.0D));
		map.put("Pollux", polluxList);
		List<StatisticRange> portaList = new ArrayList<StatisticRange>();
		portaList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 41.0D, 2.0D));
		portaList.add(new StatisticRange(StatisticType.MAX_IOC, 66.0D, 9.0D));
		portaList.add(new StatisticRange(StatisticType.MAX_KAPPA, 74.0D, 16.0D));
		portaList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 22.0D, 6.0D));
		portaList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 25.0D, 11.0D));
		portaList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 9.0D, 4.0D));
		portaList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 42.0D, 13.0D));
		portaList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 432.0D, 35.0D));
		portaList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 111.0D, 16.0D));
		map.put("Porta", portaList);
		List<StatisticRange> portaxList = new ArrayList<StatisticRange>();
		portaxList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 42.0D, 2.0D));
		portaxList.add(new StatisticRange(StatisticType.MAX_IOC, 51.0D, 7.0D));
		portaxList.add(new StatisticRange(StatisticType.MAX_KAPPA, 66.0D, 14.0D));
		portaxList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 18.0D, 3.0D));
		portaxList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 19.0D, 8.0D));
		portaxList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 6.0D, 3.0D));
		portaxList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 48.0D, 12.0D));
		portaxList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 442.0D, 24.0D));
		portaxList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 113.0D, 13.0D));
		map.put("Portax", portaxList);
		List<StatisticRange> progressivekeyList = new ArrayList<StatisticRange>();
		progressivekeyList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 38.0D, 1.0D));
		progressivekeyList.add(new StatisticRange(StatisticType.MAX_IOC, 45.0D, 6.0D));
		progressivekeyList.add(new StatisticRange(StatisticType.MAX_KAPPA, 63.0D, 13.0D));
		progressivekeyList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 14.0D, 3.0D));
		progressivekeyList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 13.0D, 5.0D));
		progressivekeyList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 4.0D, 3.0D));
		progressivekeyList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 49.0D, 14.0D));
		progressivekeyList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 428.0D, 24.0D));
		progressivekeyList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 109.0D, 15.0D));
		map.put("Progressivekey", progressivekeyList);
		List<StatisticRange> progkeybeaufortList = new ArrayList<StatisticRange>();
		progkeybeaufortList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 38.0D, 1.0D));
		progkeybeaufortList.add(new StatisticRange(StatisticType.MAX_IOC, 45.0D, 6.0D));
		progkeybeaufortList.add(new StatisticRange(StatisticType.MAX_KAPPA, 63.0D, 14.0D));
		progkeybeaufortList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 14.0D, 3.0D));
		progkeybeaufortList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 14.0D, 6.0D));
		progkeybeaufortList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 4.0D, 3.0D));
		progkeybeaufortList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 49.0D, 12.0D));
		progkeybeaufortList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 429.0D, 26.0D));
		progkeybeaufortList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 109.0D, 14.0D));
		map.put("Progkey beaufort", progkeybeaufortList);
		List<StatisticRange> quagmire2List = new ArrayList<StatisticRange>();
		quagmire2List.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 41.0D, 2.0D));
		quagmire2List.add(new StatisticRange(StatisticType.MAX_IOC, 65.0D, 8.0D));
		quagmire2List.add(new StatisticRange(StatisticType.MAX_KAPPA, 75.0D, 15.0D));
		quagmire2List.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 21.0D, 5.0D));
		quagmire2List.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 25.0D, 10.0D));
		quagmire2List.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 8.0D, 4.0D));
		quagmire2List.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 42.0D, 14.0D));
		quagmire2List.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 431.0D, 32.0D));
		quagmire2List.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 109.0D, 16.0D));
		map.put("Quagmire2", quagmire2List);
		List<StatisticRange> quagmire3List = new ArrayList<StatisticRange>();
		quagmire3List.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 42.0D, 2.0D));
		quagmire3List.add(new StatisticRange(StatisticType.MAX_IOC, 66.0D, 9.0D));
		quagmire3List.add(new StatisticRange(StatisticType.MAX_KAPPA, 76.0D, 18.0D));
		quagmire3List.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 22.0D, 5.0D));
		quagmire3List.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 24.0D, 10.0D));
		quagmire3List.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 8.0D, 4.0D));
		quagmire3List.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 43.0D, 12.0D));
		quagmire3List.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 444.0D, 36.0D));
		quagmire3List.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 110.0D, 17.0D));
		map.put("Quagmire3", quagmire3List);
		List<StatisticRange> quagmire4List = new ArrayList<StatisticRange>();
		quagmire4List.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 41.0D, 2.0D));
		quagmire4List.add(new StatisticRange(StatisticType.MAX_IOC, 65.0D, 8.0D));
		quagmire4List.add(new StatisticRange(StatisticType.MAX_KAPPA, 75.0D, 18.0D));
		quagmire4List.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 21.0D, 5.0D));
		quagmire4List.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 23.0D, 10.0D));
		quagmire4List.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 8.0D, 4.0D));
		quagmire4List.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 44.0D, 13.0D));
		quagmire4List.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 440.0D, 33.0D));
		quagmire4List.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 111.0D, 17.0D));
		map.put("Quagmire4", quagmire4List);
		List<StatisticRange> ragbabyList = new ArrayList<StatisticRange>();
		ragbabyList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 41.0D, 1.0D));
		ragbabyList.add(new StatisticRange(StatisticType.MAX_IOC, 49.0D, 8.0D));
		ragbabyList.add(new StatisticRange(StatisticType.MAX_KAPPA, 71.0D, 14.0D));
		ragbabyList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 18.0D, 4.0D));
		ragbabyList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 18.0D, 6.0D));
		ragbabyList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 6.0D, 4.0D));
		ragbabyList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 49.0D, 11.0D));
		ragbabyList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 473.0D, 23.0D));
		ragbabyList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 112.0D, 15.0D));
		map.put("Ragbaby", ragbabyList);
		List<StatisticRange> redefenceList = new ArrayList<StatisticRange>();
		redefenceList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 63.0D, 5.0D));
		redefenceList.add(new StatisticRange(StatisticType.MAX_IOC, 72.0D, 10.0D));
		redefenceList.add(new StatisticRange(StatisticType.MAX_KAPPA, 94.0D, 16.0D));
		redefenceList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 41.0D, 10.0D));
		redefenceList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 43.0D, 16.0D));
		redefenceList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 10.0D, 4.0D));
		redefenceList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 49.0D, 7.0D));
		redefenceList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 653.0D, 18.0D));
		redefenceList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 128.0D, 15.0D));
		map.put("Redefence", redefenceList);
		List<StatisticRange> runningkeyList = new ArrayList<StatisticRange>();
		runningkeyList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 39.0D, 4.0D));
		runningkeyList.add(new StatisticRange(StatisticType.MAX_IOC, 56.0D, 18.0D));
		runningkeyList.add(new StatisticRange(StatisticType.MAX_KAPPA, 74.0D, 22.0D));
		runningkeyList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 16.0D, 8.0D));
		runningkeyList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 16.0D, 15.0D));
		runningkeyList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 4.0D, 5.0D));
		runningkeyList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 49.0D, 19.0D));
		runningkeyList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 445.0D, 35.0D));
		runningkeyList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 107.0D, 23.0D));
		map.put("RunningKey", runningkeyList);
		List<StatisticRange> seriatedpfairList = new ArrayList<StatisticRange>();
		seriatedpfairList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 48.0D, 3.0D));
		seriatedpfairList.add(new StatisticRange(StatisticType.MAX_IOC, 56.0D, 9.0D));
		seriatedpfairList.add(new StatisticRange(StatisticType.MAX_KAPPA, 75.0D, 19.0D));
		seriatedpfairList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 25.0D, 6.0D));
		seriatedpfairList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 25.0D, 9.0D));
		seriatedpfairList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 7.0D, 4.0D));
		seriatedpfairList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 49.0D, 8.0D));
		seriatedpfairList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 484.0D, 38.0D));
		seriatedpfairList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 115.0D, 17.0D));
		map.put("Seriatedpfair", seriatedpfairList);
		List<StatisticRange> swagmanList = new ArrayList<StatisticRange>();
		swagmanList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 62.0D, 5.0D));
		swagmanList.add(new StatisticRange(StatisticType.MAX_IOC, 72.0D, 11.0D));
		swagmanList.add(new StatisticRange(StatisticType.MAX_KAPPA, 90.0D, 17.0D));
		swagmanList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 39.0D, 7.0D));
		swagmanList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 39.0D, 12.0D));
		swagmanList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 10.0D, 4.0D));
		swagmanList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 50.0D, 6.0D));
		swagmanList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 650.0D, 18.0D));
		swagmanList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 135.0D, 16.0D));
		map.put("Swagman", swagmanList);
		List<StatisticRange> tridigitalList = new ArrayList<StatisticRange>();
		tridigitalList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 122.0D, 8.0D));
		tridigitalList.add(new StatisticRange(StatisticType.MAX_IOC, 134.0D, 15.0D));
		tridigitalList.add(new StatisticRange(StatisticType.MAX_KAPPA, 161.0D, 22.0D));
		tridigitalList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 195.0D, 29.0D));
		tridigitalList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 197.0D, 37.0D));
		tridigitalList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 38.0D, 4.0D));
		tridigitalList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 49.0D, 3.0D));
		tridigitalList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 0.0D, 0.0D));
		tridigitalList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 0.0D, 0.0D));
		map.put("Tridigital", tridigitalList);
		List<StatisticRange> trifidList = new ArrayList<StatisticRange>();
		trifidList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 42.0D, 3.0D));
		trifidList.add(new StatisticRange(StatisticType.MAX_IOC, 53.0D, 8.0D));
		trifidList.add(new StatisticRange(StatisticType.MAX_KAPPA, 68.0D, 14.0D));
		trifidList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 18.0D, 5.0D));
		trifidList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 18.0D, 8.0D));
		trifidList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 6.0D, 3.0D));
		trifidList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 51.0D, 12.0D));
		trifidList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 462.0D, 37.0D));
		trifidList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 112.0D, 15.0D));
		map.put("Trifid", trifidList);
		List<StatisticRange> trisquareList = new ArrayList<StatisticRange>();
		trisquareList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 43.0D, 2.0D));
		trisquareList.add(new StatisticRange(StatisticType.MAX_IOC, 51.0D, 5.0D));
		trisquareList.add(new StatisticRange(StatisticType.MAX_KAPPA, 64.0D, 11.0D));
		trisquareList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 21.0D, 3.0D));
		trisquareList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 21.0D, 6.0D));
		trisquareList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 7.0D, 2.0D));
		trisquareList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 49.0D, 6.0D));
		trisquareList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 503.0D, 23.0D));
		trisquareList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 119.0D, 14.0D));
		map.put("Trisquare", trisquareList);
		List<StatisticRange> trisquarehrList = new ArrayList<StatisticRange>();
		trisquarehrList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 43.0D, 1.0D));
		trisquarehrList.add(new StatisticRange(StatisticType.MAX_IOC, 52.0D, 5.0D));
		trisquarehrList.add(new StatisticRange(StatisticType.MAX_KAPPA, 65.0D, 11.0D));
		trisquarehrList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 21.0D, 3.0D));
		trisquarehrList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 21.0D, 5.0D));
		trisquarehrList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 7.0D, 3.0D));
		trisquarehrList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 50.0D, 7.0D));
		trisquarehrList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 512.0D, 23.0D));
		trisquarehrList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 120.0D, 13.0D));
		map.put("Trisquare HR", trisquarehrList);
		List<StatisticRange> twosquareList = new ArrayList<StatisticRange>();
		twosquareList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 49.0D, 3.0D));
		twosquareList.add(new StatisticRange(StatisticType.MAX_IOC, 60.0D, 8.0D));
		twosquareList.add(new StatisticRange(StatisticType.MAX_KAPPA, 77.0D, 16.0D));
		twosquareList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 36.0D, 9.0D));
		twosquareList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 72.0D, 24.0D));
		twosquareList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 11.0D, 4.0D));
		twosquareList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 28.0D, 8.0D));
		twosquareList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 542.0D, 33.0D));
		twosquareList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 121.0D, 18.0D));
		map.put("Two square", twosquareList);
		List<StatisticRange> twosquarespiralList = new ArrayList<StatisticRange>();
		twosquarespiralList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 47.0D, 3.0D));
		twosquarespiralList.add(new StatisticRange(StatisticType.MAX_IOC, 59.0D, 8.0D));
		twosquarespiralList.add(new StatisticRange(StatisticType.MAX_KAPPA, 76.0D, 15.0D));
		twosquarespiralList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 34.0D, 7.0D));
		twosquarespiralList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 72.0D, 24.0D));
		twosquarespiralList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 11.0D, 4.0D));
		twosquarespiralList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 25.0D, 9.0D));
		twosquarespiralList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 501.0D, 36.0D));
		twosquarespiralList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 119.0D, 17.0D));
		map.put("Twosquarespiral", twosquarespiralList);
		List<StatisticRange> vigautokeyList = new ArrayList<StatisticRange>();
		vigautokeyList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 39.0D, 1.0D));
		vigautokeyList.add(new StatisticRange(StatisticType.MAX_IOC, 45.0D, 6.0D));
		vigautokeyList.add(new StatisticRange(StatisticType.MAX_KAPPA, 62.0D, 12.0D));
		vigautokeyList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 15.0D, 3.0D));
		vigautokeyList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 14.0D, 5.0D));
		vigautokeyList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 4.0D, 3.0D));
		vigautokeyList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 50.0D, 12.0D));
		vigautokeyList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 434.0D, 23.0D));
		vigautokeyList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 111.0D, 16.0D));
		map.put("Vigautokey", vigautokeyList);
		List<StatisticRange> vigenereList = new ArrayList<StatisticRange>();
		vigenereList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 42.0D, 2.0D));
		vigenereList.add(new StatisticRange(StatisticType.MAX_IOC, 65.0D, 8.0D));
		vigenereList.add(new StatisticRange(StatisticType.MAX_KAPPA, 74.0D, 15.0D));
		vigenereList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 22.0D, 6.0D));
		vigenereList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 26.0D, 11.0D));
		vigenereList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 8.0D, 4.0D));
		vigenereList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 42.0D, 13.0D));
		vigenereList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 438.0D, 33.0D));
		vigenereList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 106.0D, 16.0D));
		map.put("Vigenere", vigenereList);
		List<StatisticRange> period7vigenereList = new ArrayList<StatisticRange>();
		period7vigenereList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 42.0D, 3.0D));
		period7vigenereList.add(new StatisticRange(StatisticType.MAX_IOC, 67.0D, 9.0D));
		period7vigenereList.add(new StatisticRange(StatisticType.MAX_KAPPA, 78.0D, 17.0D));
		period7vigenereList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 23.0D, 5.0D));
		period7vigenereList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 23.0D, 8.0D));
		period7vigenereList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 9.0D, 4.0D));
		period7vigenereList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 50.0D, 10.0D));
		period7vigenereList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 437.0D, 34.0D));
		period7vigenereList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 108.0D, 17.0D));
		map.put("period 7 Vigenere", period7vigenereList);
		List<StatisticRange> vigslidefairList = new ArrayList<StatisticRange>();
		vigslidefairList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 40.0D, 2.0D));
		vigslidefairList.add(new StatisticRange(StatisticType.MAX_IOC, 63.0D, 9.0D));
		vigslidefairList.add(new StatisticRange(StatisticType.MAX_KAPPA, 72.0D, 16.0D));
		vigslidefairList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 18.0D, 4.0D));
		vigslidefairList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 25.0D, 9.0D));
		vigslidefairList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 6.0D, 3.0D));
		vigslidefairList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 40.0D, 11.0D));
		vigslidefairList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 436.0D, 34.0D));
		vigslidefairList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 112.0D, 15.0D));
		map.put("Vigslidefair", vigslidefairList);
		List<StatisticRange> routetranspList = new ArrayList<StatisticRange>();
		routetranspList.add(new StatisticRange(StatisticType.INDEX_OF_COINCIDENCE, 63.0D, 5.0D));
		routetranspList.add(new StatisticRange(StatisticType.MAX_IOC, 73.0D, 11.0D));
		routetranspList.add(new StatisticRange(StatisticType.MAX_KAPPA, 92.0D, 17.0D));
		routetranspList.add(new StatisticRange(StatisticType.DIGRAPHIC_IOC, 46.0D, 14.0D));
		routetranspList.add(new StatisticRange(StatisticType.EVEN_DIGRAPHIC_IOC, 47.0D, 18.0D));
		routetranspList.add(new StatisticRange(StatisticType.LONG_REPEAT_3, 12.0D, 6.0D));
		routetranspList.add(new StatisticRange(StatisticType.LONG_REPEAT_ODD, 50.0D, 7.0D));
		routetranspList.add(new StatisticRange(StatisticType.LOG_DIGRAPH, 675.0D, 33.0D));
		routetranspList.add(new StatisticRange(StatisticType.SINGLE_LETTER_DIGRAPH, 162.0D, 50.0D));
		map.put("Route Transp", routetranspList);
		return map;
	}**/
}
